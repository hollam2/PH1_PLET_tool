cat("Error loading dataset 2:", e$message, "\n")
})
# Try to open the third dataset
tryCatch({
eurobis <- arrow::open_dataset(path_to_eurobis_3, filesystem=data_lake, format="parquet")
}, error = function(e) {
cat("Error loading dataset 3:", e$message, "\n")
})
library(arrow)
library(dplyr)
source("search_data_lake/_fetch_occurrence_data.R")
occ = fetch_occurrence_data()
print(occ)
s3_url <- occ[[1]]
s3_url = "https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet"
# Parse the S3 URL to extract the endpoint and path
temp <- strsplit(s3_url, "//")[[1]][2]  # Remove 'https://'
endpoint <- strsplit(temp, "/")[[1]][1]  # Extract endpoint
data_path <- sub(paste0(endpoint, "/"), "", temp)  # Extract path
# Create the S3FileSystem connection
data_lake <- S3FileSystem$create(anonymous = TRUE,
scheme = "https",
endpoint_override = endpoint)
# Open dataset dynamically
eurobis = arrow::open_dataset(data_path, filesystem=data_lake, format="parquet")
# Filtering parameters
aphia_ID = 126417
sel_longitude = c(0, 1)
sel_latitude = c(50, 51)
start_date = "2019-01-01"
end_date = "2020-12-31"
# Apply filtering
my_selection <- eurobis |>
filter(aphiaidaccepted == aphia_ID,
longitude > sel_longitude[1],
longitude < sel_longitude[2],
latitude > sel_latitude[1],
latitude < sel_latitude[2],
observationdate >= as.POSIXct(start_date),
observationdate <= as.POSIXct(end_date)) |>
collect()
library(arrow)
library(dplyr)
source("search_data_lake/_fetch_occurrence_data.R")
occ = fetch_occurrence_data()
print(occ)
s3_url <- occ[[1]]
#s3_url = "https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet"
# Parse the S3 URL to extract the endpoint and path
temp <- strsplit(s3_url, "//")[[1]][2]  # Remove 'https://'
endpoint <- strsplit(temp, "/")[[1]][1]  # Extract endpoint
data_path <- sub(paste0(endpoint, "/"), "", temp)  # Extract path
# Create the S3FileSystem connection
data_lake <- S3FileSystem$create(anonymous = TRUE,
scheme = "https",
endpoint_override = endpoint)
# Open dataset dynamically
eurobis = arrow::open_dataset(data_path, filesystem=data_lake, format="parquet")
# Filtering parameters
aphia_ID = 126417
sel_longitude = c(0, 1)
sel_latitude = c(50, 51)
start_date = "2019-01-01"
end_date = "2020-12-31"
# Apply filtering
my_selection <- eurobis |>
filter(aphiaidaccepted == aphia_ID,
longitude > sel_longitude[1],
longitude < sel_longitude[2],
latitude > sel_latitude[1],
latitude < sel_latitude[2],
observationdate >= as.POSIXct(start_date),
observationdate <= as.POSIXct(end_date)) |>
collect()
source("search_data_lake/_fetch_occurrence_data.R")
source("search_data_lake/_open_parquet.R")
source("search_data_lake/_fetch_occurrence_data.R")
source("search_data_lake/_open_parquet.R")
occ = fetch_occurrence_data()
print(occ)
my_parquet <- occ[[1]]
dataset = open_my_parquet(my_parquet)
# Filtering parameters
aphia_ID = 126417
sel_longitude = c(0, 1)
sel_latitude = c(50, 51)
start_date = "2019-01-01"
end_date = "2020-12-31"
# Apply filtering
my_selection <- eurobis |>
filter(aphiaidaccepted == aphia_ID,
longitude > sel_longitude[1],
longitude < sel_longitude[2],
latitude > sel_latitude[1],
latitude < sel_latitude[2],
observationdate >= as.POSIXct(start_date),
observationdate <= as.POSIXct(end_date)) |>
collect()
source("search_data_lake/_fetch_occurrence_data.R")
source("search_data_lake/_open_parquet.R")
occ = fetch_occurrence_data()
print(occ)
my_parquet <- occ[[1]]
dataset = open_my_parquet(my_parquet)
# Filtering parameters
aphia_ID = 126417
sel_longitude = c(0, 1)
sel_latitude = c(50, 51)
start_date = "2019-01-01"
end_date = "2020-12-31"
# Apply filtering
my_selection <- eurobis |>
filter(aphiaidaccepted == aphia_ID,
longitude > sel_longitude[1],
longitude < sel_longitude[2],
latitude > sel_latitude[1],
latitude < sel_latitude[2],
observationdate >= as.POSIXct(start_date),
observationdate <= as.POSIXct(end_date)) |>
collect()
print(my_selection)
source("search_data_lake/_fetch_occurrence_data.R")
source("search_data_lake/_open_parquet.R")
occ = fetch_occurrence_data()
print(occ)
# my_parquet = occ[[1]]
my_parquet = "https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet"
dataset = open_my_parquet(my_parquet)
print(dataset$schema)
column_names <- dataset$schema$names
print(column_names)
# Define the function
filter_eurobis <- function(data, filters) {
data %>%
filter(
aphiaidaccepted == filters$aphiaidaccepted,
longitude > filters$longitude[1],
longitude < filters$longitude[2],
latitude > filters$latitude[1],
latitude < filters$latitude[2],
observationdate >= as.POSIXct(filters$observationdate[1]),
observationdate <= as.POSIXct(filters$observationdate[2])
)
}
filter_params <- list(
aphiaidaccepted = 126417,
longitude = c(0, 1),
latitude = c(50, 51),
observationdate = c("2019-01-01", "2020-12-31")
)
# Apply filtering
my_selection <- filter_eurobis(eurobis, filter_params)
dataset = open_my_parquet(my_parquet)
print(dataset$schema)
column_names <- dataset$schema$names
print(column_names)
# Define the function
filter_eurobis <- function(data, filters) {
data %>%
filter(
aphiaidaccepted == filters$aphiaidaccepted,
longitude > filters$longitude[1],
longitude < filters$longitude[2],
latitude > filters$latitude[1],
latitude < filters$latitude[2],
observationdate >= as.POSIXct(filters$observationdate[1]),
observationdate <= as.POSIXct(filters$observationdate[2])
)
}
filter_params <- list(
aphiaidaccepted = 126417,
longitude = c(0, 1),
latitude = c(50, 51),
observationdate = c("2019-01-01", "2020-12-31")
)
# Apply filtering
my_selection <- filter_eurobis(dataset, filter_params)
print(my_selection)
print(my_selection)
print(my_selection)
# my_parquet = occ[[1]]
my_parquet = "https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet"
dataset = open_my_parquet(my_parquet)
print(dataset$schema)
column_names <- dataset$schema$names
print(column_names)
# Define the function
filter_eurobis <- function(data, filters) {
# Get available column names in the dataset
available_columns <- names(data)
# Initialize filter expression list
filter_conditions <- list()
# Loop through filters and dynamically apply them
for (key in names(filters)) {
if (key %in% available_columns) {
value <- filters[[key]]
# Apply different filtering logic based on the value type
if (length(value) == 1) {
# Single value filter (e.g., exact match)
filter_conditions <- append(filter_conditions, list(rlang::expr(!!rlang::sym(key) == !!value)))
} else if (length(value) == 2) {
# Range filter (e.g., between two values)
filter_conditions <- append(filter_conditions, list(rlang::expr(!!rlang::sym(key) > !!value[1] & !!rlang::sym(key) < !!value[2])))
}
} else {
# Warn if a key is not found in the dataset
warning(paste("Filter", key, "not applied: column does not exist in dataset"))
}
}
# Apply filtering conditions and collect data
data %>%
filter(!!!filter_conditions) %>%
collect()  # Ensures the data is loaded into memory
}
filter_params <- list(
aphiaidaccepted = 126417,
longitude = c(0, 1),
latitude = c(50, 51),
observationdate = c("2019-01-01", "2020-12-31")
)
# Apply filtering
my_selection <- filter_eurobis(dataset, filter_params)
# function
filter_eurobis <- function(data, filters) {
# Get available column names in the dataset
available_columns <- names(data)
# Initialize filter expression list
filter_conditions <- list()
# Loop through filters and dynamically apply them
for (key in names(filters)) {
if (key %in% available_columns) {
value <- filters[[key]]
# Convert timestamps if necessary
if (inherits(data[[key]], "POSIXct") || grepl("date", key, ignore.case = TRUE)) {
value <- as.POSIXct(value)  # Convert string to POSIXct for filtering
}
# Apply different filtering logic based on value type
if (length(value) == 1) {
# Single value filter (e.g., exact match)
filter_conditions <- append(filter_conditions, list(expr(!!sym(key) == !!value)))
} else if (length(value) == 2) {
# Range filter (e.g., between two values)
filter_conditions <- append(filter_conditions, list(expr(!!sym(key) > !!value[1] & !!sym(key) < !!value[2])))
}
} else {
# Warn if a key is not found in the dataset
warning(paste("Filter", key, "not applied: column does not exist in dataset"))
}
}
# Apply filtering conditions and collect data
data %>%
filter(!!!filter_conditions) %>%
collect()  # Ensures the data is loaded into memory
}
filter_params <- list(
aphiaidaccepted = 126417,
longitude = c(0, 1),
latitude = c(50, 51),
observationdate = c("2019-01-01", "2020-12-31")
)
# Apply filtering
my_selection <- filter_eurobis(dataset, filter_params)
print(my_selection)
library(dplyr)
library(rlang)
library(arrow)
source("search_data_lake/_fetch_occurrence_data.R")
source("search_data_lake/_open_parquet.R")
source("search_data_lake/_filter_parquet.R")
occ = fetch_occurrence_data()
print(occ)
# alternatives for occ parquet
# https://s3.waw3-1.cloudferro.com/emodnet/biology/eurobis_occurrence_data/eurobis_occurrences_geoparquet_2024-10-01.parquet
# https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet
# my_parquet = occ[[1]]
my_parquet = "https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet"
dataset = open_my_parquet(my_parquet)
print(dataset$schema)
column_names <- dataset$schema$names
print(column_names)
filter_params <- list(
aphiaidaccepted = 126417,
longitude = c(0, 1),
latitude = c(50, 51),
observationdate = c("2019-01-01", "2020-12-31")
)
# Apply filtering
my_selection <- filter_eurobis(dataset, filter_params)
print(my_selection)
library(dplyr)
library(rlang)
library(arrow)
source("search_data_lake/_fetch_occurrence_data.R")
source("search_data_lake/_open_parquet.R")
source("search_data_lake/_filter_parquet.R")
occ = fetch_occurrence_data()
print(occ)
# alternatives for occ parquet
# https://s3.waw3-1.cloudferro.com/emodnet/biology/eurobis_occurrence_data/eurobis_occurrences_geoparquet_2024-10-01.parquet
# https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet
# my_parquet = occ[[1]]
my_parquet = "https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet"
dataset = open_my_parquet(my_parquet)
print(dataset$schema)
column_names <- dataset$schema$names
print(column_names)
filter_params <- list(
aphiaidaccepted = 126417,
longitude = c(0, 1),
latitude = c(50, 51),
observationdate = c("2019-01-01", "2020-12-31")
)
# Apply filtering
my_selection <- filter_eurobis(dataset, filter_params)
print(my_selection)
print(dataset$schema)
library(dplyr)
library(rlang)
library(arrow)
source("search_data_lake/_fetch_occurrence_data.R")
source("search_data_lake/_open_parquet.R")
source("search_data_lake/_filter_parquet.R")
occ = fetch_occurrence_data()
print(occ)
# alternatives for occ parquet
# https://s3.waw3-1.cloudferro.com/emodnet/biology/eurobis_occurrence_data/eurobis_occurrences_geoparquet_2024-10-01.parquet
# https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet
# my_parquet = occ[[1]]
my_parquet = "https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet"
dataset = open_my_parquet(my_parquet)
print(dataset$schema)
column_names <- dataset$schema$names
print(column_names)
filter_params <- list(
datasetid = 8437,
longitude = c(0, 1),
latitude = c(50, 51),
observationdate = c("2019-01-01", "2020-12-31")
)
# Apply filtering
my_selection <- filter_parquet(dataset, filter_params)
print(my_selection)
my_subset = subset(my_selection, select=c(
observationdate,
Taxon,
parameter,
parameter_value
)
)
my_subset = subset(my_selection, select=c(
observationdate,
parameter,
parameter_value
)
)
View(my_subset)
library(dplyr)
library(rlang)
library(arrow)
source("search_data_lake/_fetch_occurrence_data.R")
source("search_data_lake/_open_parquet.R")
source("search_data_lake/_filter_parquet.R")
occ = fetch_occurrence_data()
print(occ)
# alternatives for occ parquet
# https://s3.waw3-1.cloudferro.com/emodnet/biology/eurobis_occurrence_data/eurobis_occurrences_geoparquet_2024-10-01.parquet
# https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet
# my_parquet = occ[[1]]
my_parquet = "https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet"
dataset = open_my_parquet(my_parquet)
print(dataset$schema)
column_names <- dataset$schema$names
print(column_names)
filter_params <- list(
datasetid = 8437,
#longitude = c(0, 1),
#latitude = c(50, 51),
observationdate = c("2013-01-01", "2024-12-31")
)
my_selection <- filter_parquet(dataset, filter_params)
print(my_selection)
print(dataset$schema)
my_subset = subset(my_selection, select=c(
datasetid,
observationdate,
parameter,
parameter_value
)
)
filter_params <- list(
aphiaidaccepted = 126417,
#datasetid = 8437,
longitude = c(0, 1),
latitude = c(50, 51),
observationdate = c("2013-01-01", "2024-12-31")
)
# Apply filtering
my_selection <- filter_parquet(dataset, filter_params)
print(my_selection)
# select columns
my_subset = subset(my_selection, select=c(
datasetid,
observationdate,
parameter,
parameter_value
)
)
View(my_subset)
View(my_selection)
View(my_selection)
library(dplyr)
library(rlang)
library(arrow)
source("search_data_lake/_fetch_occurrence_data.R")
source("search_data_lake/_open_parquet.R")
source("search_data_lake/_filter_parquet.R")
occ = fetch_occurrence_data()
print(occ)
# alternatives for occ parquet
# https://s3.waw3-1.cloudferro.com/emodnet/biology/eurobis_occurrence_data/eurobis_occurrences_geoparquet_2024-10-01.parquet
# https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet
# my_parquet = occ[[1]]
my_parquet = "https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet"
my_parquet = "https://s3.waw3-1.cloudferro.com/emodnet/biology/eurobis_occurrence_data/eurobis_occurrences_geoparquet_2024-10-01.parquet"
dataset = open_my_parquet(my_parquet)
print(dataset$schema)
column_names <- dataset$schema$names
print(column_names)
filter_params <- list(
aphiaidaccepted = 126417,
#datasetid = 8437,
longitude = c(0, 1),
latitude = c(50, 51),
observationdate = c("2013-01-01", "2024-12-31")
)
# Apply filtering
my_selection <- filter_parquet(dataset, filter_params)
print(my_selection)
# select columns
my_subset = subset(my_selection, select=c(
datasetid,
observationdate,
parameter,
parameter_value
)
)
# select columns
my_subset = subset(my_selection, select=c(
datasetid,
observationdate,
parameter_value
)
)
my_subset = subset(my_selection, select=c(
datasetid,
observationdate,
)
)
my_subset = subset(my_selection, select=c(
datasetid,
observationdate
)
)
View(my_selection)
library(dplyr)
library(rlang)
library(arrow)
source("search_data_lake/_fetch_occurrence_data.R")
source("search_data_lake/_open_parquet.R")
source("search_data_lake/_filter_parquet.R")
occ = fetch_occurrence_data()
print(occ)
# alternatives for occ parquet
# https://s3.waw3-1.cloudferro.com/emodnet/biology/eurobis_occurrence_data/eurobis_occurrences_geoparquet_2024-10-01.parquet
# https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet
# my_parquet = occ[[1]]
my_parquet = "https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet"
dataset = open_my_parquet(my_parquet)
print(dataset$schema)
column_names <- dataset$schema$names
print(column_names)
library(dplyr)
library(rlang)
library(arrow)
source("search_data_lake/_fetch_occurrence_data.R")
source("search_data_lake/_open_parquet.R")
source("search_data_lake/_filter_parquet.R")
occ = fetch_occurrence_data()
print(occ)
# alternatives for occ parquet
# https://s3.waw3-1.cloudferro.com/emodnet/biology/eurobis_occurrence_data/eurobis_occurrences_geoparquet_2024-10-01.parquet
# https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet
# my_parquet = occ[[1]]
my_parquet = "https://s3.waw3-1.cloudferro.com/emodnet/emodnet_biology/12639/eurobis_parquet_2025-03-14.parquet"
dataset = open_my_parquet(my_parquet)
print(dataset$schema)
column_names <- dataset$schema$names
print(column_names)
filter_params <- list(
aphiaidaccepted = 126417,
#datasetid = 8437,
longitude = c(0, 1),
latitude = c(50, 51),
observationdate = c("2013-01-01", "2024-12-31")
)
# Apply filtering
my_selection <- filter_parquet(dataset, filter_params)
# Apply filtering
my_selection <- filter_parquet(dataset, filter_params)
# Apply filtering
my_selection <- filter_parquet(dataset, filter_params)
gc()
